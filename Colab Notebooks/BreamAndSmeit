{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPlzrssB3d9sx3vp82HB2Rv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"uOIbaLGcjjCg","executionInfo":{"status":"ok","timestamp":1662900706166,"user_tz":-540,"elapsed":428,"user":{"displayName":"최동영","userId":"18154264124028117632"}},"outputId":"bf6c1d7b-e066-45d5-fdc9-8288ea65f829"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":5}],"source":["bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, \n","                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, \n","                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]\n","bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, \n","                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, \n","                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]\n","\n","smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]\n","smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]\n","\n","import matplotlib.pyplot as plt\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","kn = KNeighborsClassifier()\n","\n","plt.scatter(bream_length, bream_weight)\n","plt.scatter(smelt_length, smelt_weight)\n","plt.xlabel('length')\n","plt.ylabel('weight)')\n","plt.show()\n","\n","length = bream_length + smelt_length\n","weight = bream_weight + smelt_weight\n","\n","fish_data = [[l,w] for l, w in zip(length,weight)]\n","\n","fish_target = [1] * 35 + [0] * 14\n","\n","kn.fit(fish_data, fish_target)\n","\n","kn.score(fish_data, fish_target)\n","\n","kn.predict([[30, 600]])"]}]}